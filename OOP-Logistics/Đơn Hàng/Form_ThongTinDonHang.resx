<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="grpCuocPhiDon.GenerateMember" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>False</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJtmigCbZooBmmeLDptnixicZooOnGmLAZxo
        iwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJtmigCbZooBmmeLDptn
        ixicZooOnGmLAZxoiwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACea4sAnWuLBp5qjFqicY+6pXWR2KJx
        j7qeaoxZn2qLBp5qjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACea4sAnWuLBp5q
        jFqicY+6pXWR2KJxj7qeaoxZn2qLBp5qjAAAAAAAAAAAAAAAAAAAAAAAnWmNAKR2iwCdaoxcqXuT7sCf
        ov/Krqn/wJ+i/6l7k+6eaoxboWyHAJ9sjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnWmNAKR2
        iwCdaoxcqXuT7sCfov/Krqn/wJ+i/6l7k+6eaoxboWyHAJ9sjwAAAAAAnmqLCZtmihmaZYkbmmWKKKJw
        j8HBn6L/yq6o/7yZoP/Krqj/wZ+i/6Jwj8CbZokommWJG5pliRyaZYkcmmWJHJpliRyaZYkcmmWJHJpl
        iRyaZYkbmmWKKKJwj8HBn6L/yq6o/7yZoP/Krqj/wZ+i/6Jwj8CbZokommaJGJ5qiwmgbo6NpnaS26h4
        k+OndpPmpXWR+8quqP+9mZ//oG2O/72ZoP/Krqj/pXWR+6d2k+aoeJPjqHiU46h4lOOoeJPjqHiU46h4
        k+OoeJTjqHiU46h4k+OndpPmpXWR+8quqP+9mZ//oG2O/72ZoP/Krqj/pXWR+6d2k+amdpLboG6OjaV0
        kvbTsbP/38K8/9a3tv+xhpr/wJ+i/8quqP+8mZ//yq6o/8Cfof+yhpr/17e2/97BvP/bvbr/2726/97A
        vP/avLn/3sC8/9u9uv/bvbr/3sG8/9a3tv+xhpr/wJ+i/8quqP+8mZ//yq6o/8Cfof+yhpr/17e3/9S0
        tP+mdpL2n22N/8qmrP/mzcX/u5Oj/8qnsf+ug5j/wJ+i/8qtqP/AnqH/roOY/8uosf+7k6P/6M/H/82q
        sf/NqrH/6M/H/7uSo//oz8f/zaqx/82qsf/oz8f/u5Oj/8qnsf+ug5j/wJ+i/8qtqP/AnqH/roOY/8uo
        sf+7kqP/2bq3/6h5lP+fbY3/yqat/+fNxf+7k6P/5MrE/9Gvs/+1ip3/r4OY/7WKnf/Rr7T/5MrE/7uT
        o//oz8f/zaqx/82qsf/oz8f/u5Kj/+jPx//NqrH/zaqx/+jPx/+7k6P/5MrE/9Gvs/+1ip3/r4OY/7WK
        nf/Rr7T/5MrE/7uSov/Zubf/qHmU/6V0kvfTsrP/3sG8/9q7uf/ewbz/38O9/9q8uf/XuLf/27y5/9/D
        vf/ewbz/2ru5/97AvP/bvbr/2726/97AvP/avLn/3sC8/9u9uv/cvrr/3sG8/9u9uP/fwbv/4MK8/9u8
        uP/YuLb/27y4/+DCvP/fwbv/3L24/9W0tP+mdpL3oG2Ok6d2kviwgJL/sYGS/7GBkv+xgZL/sYGS/7GC
        kv+xgZL/sYGS/7GCkv+xgpL/sYGS/7GBkv+xgZL/sYGS/7GBkv+xgZL/sYGS/7CAkv+oeJT/p3id/6Z4
        nv+meJ7/p3ie/6d5nv+meJ3/pnid/6Z4nf+neJ3/pXWT+KBtjpObZo0lqHWM4+W2hv/vwYX/7sCF/+7A
        hf/uwIX/7sGF/+7Ahf/puob/5baF/+W2hf/pu4b/7sCF/+7Bhf/uwIX/7sCF/+7Ahf/vwYX/5beF/6Z1
        lf+ZdNj/mnXa/5p12f+ZduH/mXbi/5l24v+ZduL/mXbj/5p12P+ebJfjn2qIJZlljh+qeIzi78GG//rN
        hf/5zIX/+cyF//nNhf/xw4X/06KH/7mMj/+vhpb/r4aW/7qNj//SoYf/8MKG//rNhf/5zIX/+cyF//rN
        hf/vwYX/qHiX/5l13f+dcbL/nXGx/5l36P+ZeO7/mXju/5l47v+ZeO//mnfj/55tmOGea4UfmWaOH6p4
        jOLuwIb/+cyF//jLhf/5zIX/6LmG/7iKjv+llrL/qL3X/6vQ6f+r0On/qLzX/6WVsv+4io7/6LmG//jM
        hf/4y4X/+cyF/+7Bhf+oeJf/mXbi/5p23/+addn/mXbh/5l24v+Zd+T/mXjr/5l47v+addT/nmyUyZ5q
        hhaZZo4fqniM4u7Ahv/5zIX/+cyF/+/Bhf+4io7/pqbD/6zV7f+u5Pr/ruT6/67k+v+u5fv/rd30/6an
        xP+4io//8MKG//jMhf/5zIX/7sGF/6h4l/+Zdd3/nnKw/6d5nP+oepz/qHqc/6N0nP+bdMr/mXjo/51w
        rfufa4xzpW+BAZlmjh+qeIzi7sCG//nMhf/5y4X/0aGI/6WWsv+s1u3/pZu4/6m71v+u4/n/ruP5/67j
        +f+u5Pr/rd30/6WVsv/SoYf/+cuF//nMhf/uwYX/qHiX/5l02P+neJz/5saw//DStv/rzLP/t4ua/5py
        xP+bc8b/n2yRuZ9sihafbI0AmWaOH6p4jOLuwIb/+cyF//PGhf+5jJD/qL3Y/67k+v+pvNb/ooem/6m8
        1v+u4/n/ruP5/67j+f+u5fr/qLzX/7mMj//0xoX/+cyF/+7Bhf+oeJf/mXTY/6h6nf/w07b/++G8/9i0
        qf+hdKj/mnTS/55uneefbIlDoG2KAJ1ojwCZZo4fqniM4u7Ahv/5zIX/78GF/66Glv+r0On/ruT6/67j
        +f+pvdb/ooem/6rC3P+u5Pr/ruP5/67k+v+r0Oj/roWW/+/Bhf/5zIX/7sGF/6h4l/+ZdNj/p3ic/+fH
        sP/nxrD/sIKc/5pzzP+ccLL7n2yMg6BuhwSfbYwAAAAAAJlmjh+qeIzi7sCG//nMhf/vwYX/roaW/6vQ
        6f+u5Pr/ruP5/67k+v+loLz/pqbB/67l+/+u4/n/ruT6/6vQ6f+uhpb/78GF//nMhf/uwYX/qHiX/5l1
        3v+ecrD/p3mc/6Z3nf+ddL3/m3TH/p5sksGea4kcnmuMAAAAAAAAAAAAmWaOH6p4jOLuwIb/+cyF//PG
        hf+5i4//qLzX/67l+v+u4/n/ruX7/6amwf+mpcH/ruX7/67j+f+u5fr/qLzX/7mMj//0xoX/+cyF/+7B
        hf+oeJX/mnXZ/5p23f+addj/mnXY/5t0z/+ebZ3nn2uJTKBrjQCdbIoAAAAAAAAAAACZZo4fqniM4u7A
        hv/5zIX/+cuF/9GhiP+llbL/rd30/67k+v+u5fv/pqXA/6alwP+u5fv/ruT6/63d9P+llbL/0qGH//nL
        hf/5zIX/7sGG/6l3jfydbJjmnm2Z5p5tmPmebprmnm2Vy59rjGSeaosFnmuMAAAAAAAAAAAAAAAAAJlm
        jh+qeIzi7sCG//nMhf/4zIX/78GF/7iKjv+mqMX/rd70/67m/P+oss3/qLPN/67m/P+t3fT/pqfE/7iK
        j//vwob/+MyF//nMhf/uwIb/qneM5pxoijOfbIk0n2yMy59riTafaoUSnGyJAp1riAAAAAAAAAAAAAAA
        AAAAAAAAmWaOH6p4jOLtwIX/+MuD//fKg//4y4P/57mD/7eKjP+llrL/qL3Y/6rL5P+qy+X/qL3Y/6SV
        sv+3iY3/57mE//jLg//3yoP/+MuD/+3Ahf+qeIzjmWWOG59rjQqfa41Sn2yNDJ9sjQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACZZo8fqXeK4um9dv/yyHH/8cdx//HHcf/yyHH/6b5y/82ee/+3i4n/rYaT/62G
        k/+3i4n/zJ57/+m9c//yyHH/8cdx//HHcf/yyHH/6b12/6l3iuOZZo8cn2yNAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJtnjiSodYnj37J0/+i8cf/nu3H/57tx/+e7cf/ovHH/57xx/+O2
        cv/gsnT/4LJ0/+O2cv/nvHH/6Lxx/+e7cf/nu3H/57tx/+i8cf/fsnT/qHWJ5ZtmjiCfa4wAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn26PkaF5l/ipg5f/qoSW/6qElv+qhJb/qoSW/6qE
        lv+qhJb/qoSW/6qElv+qhJb/qoSW/6qElv+qhJb/qoSW/6qElv+qhJb/qoSW/6mDl/+heZf5n26PgJ9n
        igafa40AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgdZXsqLXP/6rJ4v+qyOH/qsjh/6rI
        4f+qyOH/qsjh/6rI4f+qyOH/qsjh/6rI4f+qyOH/qsjh/6rI4f+qyOH/qsjh/6rI4f+qyOH/qsni/6i1
        z/+gdZXSnmWIFp9rjQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ9uj42geZjboXyb46F8
        m+OhfJvjoXyb46F8m+OhfJvjoXyb46F8m+OhfJvjoXyb46F8m+OhfJvjoXyb46F8m+OhfJvjoXyb46F8
        m+OhfJvjoHmY3Z9uj32dZ4kGnmuMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnmmLCZ5k
        hhmeZIYcnmSGHJ5khhyeZIYcnmSGHJ5khhyeZIYcnmSGHJ5khhyeZIYcnmSGHJ5khhyeZIYcnmSGHJ5k
        hhyeZIYcnmSGHJ5khhyeZYYZn2mKCJ5oiQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////4P/4P8B/8B/Af/AcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAAAwAAAAcAAAAPAAAADwAAAB8AAAB/AAAD/wAA
        A/8AAAH/AAAB/wAAAf8AAAP///////////8=
</value>
  </data>
</root>